newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
# ''' confidence interval
conf.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "confidence", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five- Prediction interval") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")+
geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
delta<-2*(beta1+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2])
delta
---
---
title: "JHU_RM_Q3"
author: "mbh"
date: "Tuesday, June 16, 2015"
output: html_document
---
##Load and inspect data
```{r load data}
str(mtcars)
```
## Question One
Consider the mtcars data set. Fit a model with mpg as the outcome that includes number of cylinders as a factor
variable and weight as confounder.
Give the adjusted estimate for the expected change in mpg comparing 8 cylinders to 4.
-4.256
-3.206
-6.071
33.991
```{r q1}
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
fitnf<-lm(mpg~cyl+wt,data=mtcars)
summary(fitnf)
```
## Question Three
Consider the mtcars data set. Fit a model with mpg as the outcome that considers number of cylinders as a factor variable and weight as confounder. Now fit a second model with mpg as the outcome model that considers the interaction between number of cylinders (as a factor variable) and weight. Give the P-value for the likelihood ratio test comparing the two models and suggest a model using 0.05 as a type I error rate significance benchmark.InsectSprays
The P-value is small (less than 0.05). So, according to our criterion, we reject, which suggests that the interaction term is not necessary.
The P-value is larger than 0.05. So, according to our criterion, we would fail to reject, which suggests that the interaction terms is necessary.
The P-value is small (less than 0.05). Thus it is surely true that there is no interaction term in the true model.
The P-value is small (less than 0.05). So, according to our criterion, we reject, which suggests that the interaction term is necessary
The P-value is small (less than 0.05). Thus it is surely true that there is an interaction term in the true model.
The P-value is larger than 0.05. So, according to our criterion, we would fail to reject, which suggests that the interaction terms may not be necessary.
```{r q3}
fitcf<-lm(mpg~factor(cyl)+wt,data=mtcars)
fitint<-lm(mpg~factor(cyl)*wt,data=mtcars)
summary(fitcf)
summary(fitint)
```
##Question Four
```{r q4}
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4
fit4nf<-lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
fit4nf
```
## Question Five
Question 5
Consider the following data set
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
Give the hat diagonal for the most influential point
0.2025
0.9946
0.2804
0.2287
```{r q5}
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit5<-lm(y~x,data=df)
summary(fit5)
hatvalues(fit5)
```
## Question Six
```{r q6}
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit6<-lm(y~x,data=df)
dfbeta(fit6)
```
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
fitnf<-lm(mpg~cyl+wt,data=mtcars)
summary(fitnf)
fitcf<-lm(mpg~factor(cyl)+wt,data=mtcars)
fitint<-lm(mpg~factor(cyl)*wt,data=mtcars)
summary(fitcf)
summary(fitint)
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4
fit4nf<-lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
fit4nf
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit5<-lm(y~x,data=df)
summary(fit5)
hatvalues(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit6<-lm(y~x,data=df)
dfbeta(fit6)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
am<-as.factor(mtcars$am)
mtwide<-mutate(mtcars,amf)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
am<-as.factor(mtcars$am)
#mtwide<-mutate(mtcars,amf)
str(mtcars)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
mtcars$am<-as.factor(mtcars$am)
#mtwide<-mutate(mtcars,amf)
str(mtcars)
library(dplyr)
data(mtcars)
str(mtcars)
#make  am a factor column
mtcars$am<-as.factor(mtcars$am)
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtwide,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
lm1<-lm(gpm~factor(am),data=mtcars)
lm1
lm(gpm~factor(am)*wt,data=mtcars)
summary(lm(gpm~factor(am)*wt,data=mtcars))
summary(lm(gpm~factor(am)*wt-1,data=mtcars))
summary(lm(gpm~factor(am)+wt-1,data=mtcars))
summary(lm(gpm~factor(am)+wt,data=mtcars))
g2<-ggplot(data=mtcars,aes(x=wt,y=gpm))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g2
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-ln(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2)) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))_ # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
tb<-data.frame("Allocation"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),c(27,33,39))
library(ggplot2)
tb<-data.frame("Category"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),"Allocation"=c(27,33,39))
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,colour=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
theme(legend.position="none")
d
source('C:/Users/Mike/Rspace/RECM/thermalMass.r', echo=TRUE)
library(swirl)
swirl()
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,"date'])
)
class(hits[,"date"])
as.integer(head(hits[,"data"]))
as.integer(head(hits[,"date"]))
mdl<-glm(visits~date,family=poisson,data=hits)
summary(mdl)
exp(confint(mdl,"date"))
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-offset=log(visits+1)
mdl2<-log(visits+1)
mdl2<-glm$offset
?
## THE ANALYTICS EDGE 15.071x
## UNIT 6 A3
## Michael Hunt
## July 2015
## PREDICTING STOCK RETURNS WITH CLUSTER-THEN-PREDICT
# ReturnJan = the return for the company's stock during January (in the year of the observation).
# ReturnFeb = the return for the company's stock during February (in the year of the observation).
# ReturnMar = the return for the company's stock during March (in the year of the observation).
# ReturnApr = the return for the company's stock during April (in the year of the observation).
# ReturnMay = the return for the company's stock during May (in the year of the observation).
# ReturnJune = the return for the company's stock during June (in the year of the observation).
# ReturnJuly = the return for the company's stock during July (in the year of the observation).
# ReturnAug = the return for the company's stock during August (in the year of the observation).
# ReturnSep = the return for the company's stock during September (in the year of the observation).
# ReturnOct = the return for the company's stock during October (in the year of the observation).
# ReturnNov = the return for the company's stock during November (in the year of the observation).
# PositiveDec = whether or not the company's stock had a positive return in December (in the year of the observation).
#   This variable takes value 1 if the return was positive, and value 0 if the return was not positive.
# For the first 11 variables, the value stored is a proportional change in stock value during that month.
# For instance, a value of 0.05 means the stock increased in value 5% during the month, while a value
# of -0.02 means the stock decreased in value 2% during the month.
# load data into R
stocks<-read.csv("./data/StocksCluster.csv")
str(stocks)
summary(stocks)
# proportion of stocks giving positive returns in December
mean(stocks$PositiveDec)
# pairwise correlations between all the Return variables
round(cor(stocks[,1:11]),3)
library(Matrix)
max(cor(stocks[,1:11])-Diagonal(11))
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit6")
## THE ANALYTICS EDGE 15.071x
## UNIT 6 A3
## Michael Hunt
## July 2015
## PREDICTING STOCK RETURNS WITH CLUSTER-THEN-PREDICT
# ReturnJan = the return for the company's stock during January (in the year of the observation).
# ReturnFeb = the return for the company's stock during February (in the year of the observation).
# ReturnMar = the return for the company's stock during March (in the year of the observation).
# ReturnApr = the return for the company's stock during April (in the year of the observation).
# ReturnMay = the return for the company's stock during May (in the year of the observation).
# ReturnJune = the return for the company's stock during June (in the year of the observation).
# ReturnJuly = the return for the company's stock during July (in the year of the observation).
# ReturnAug = the return for the company's stock during August (in the year of the observation).
# ReturnSep = the return for the company's stock during September (in the year of the observation).
# ReturnOct = the return for the company's stock during October (in the year of the observation).
# ReturnNov = the return for the company's stock during November (in the year of the observation).
# PositiveDec = whether or not the company's stock had a positive return in December (in the year of the observation).
#   This variable takes value 1 if the return was positive, and value 0 if the return was not positive.
# For the first 11 variables, the value stored is a proportional change in stock value during that month.
# For instance, a value of 0.05 means the stock increased in value 5% during the month, while a value
# of -0.02 means the stock decreased in value 2% during the month.
# load data into R
stocks<-read.csv("./data/StocksCluster.csv")
str(stocks)
summary(stocks)
# proportion of stocks giving positive returns in December
mean(stocks$PositiveDec)
# pairwise correlations between all the Return variables
round(cor(stocks[,1:11]),3)
library(Matrix)
max(cor(stocks[,1:11])-Diagonal(11))
summary(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel<-glm(PositiveDec~.,family=binomial,data=stocksTrain)
