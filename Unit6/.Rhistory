summary(fit)
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
fit<-lm(gpm~factor(am)*wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt,data=mtcars)
summary(fit)
?mtcars
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(1,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
data(mtcars)
summary(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
names(mtcars)[9]="trans"
levels(mtcars$trans)<-c("auto","manual")
mtcars$gpm<-100/mtcars$mpg
summary(mtcars)
with(mtcars,table(carb,cyl,trans))
pairs(mtcars[,-c(1,2,8,9,10,11)])
require(lattice)
par(mar=c(3,3,2,0.5))
histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
fit<-lm(gpm~disp+hp+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~disp+hp+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(mpg~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans),data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans)-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+gm_smooth(method=lm)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+geom_smooth(method=lm)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt+factor(cyl),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt-mean(wt),data=mtcars)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
fit$confint
confint(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(hp-mean(hp))-1,data=mtcars)
summary(fit)
confint(fit)
mean(wt)
mean(mtcars$wt)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
resid(fit)
plot(resid(fit))
qqplot(resid(fit))
help(resid)
?resid
plot(fit)
par(2,2)
par(mfrow=c(2,2))
plot(m)
plot(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
confint(fit)
plot(fit)
plot(fit)
mfrow=c(2,2)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
plot(fit)
summary(fit)
qqplot
?qqplot
auto<-subset(mtcars(trans=="auto"))
auto<-subset(mtcars[trans=="auto"])
str(mtcars)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars,var=TRUE)
?lm
m<-mtcars[trans=="manual",]
m<-mtcars[mtcars$trans=="manual",]
a<-mtcars[mtcars$trans=="auto",]
qqplot(m$gpm,a$gpm)
qqlm<-lm(m$gpm~a$gpm)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11)])
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(disp-mean(disp))+I(hp-mean(hp)),data=mtcars)
confint(fit)
summary(fit)
?mtcars
pairs(mtcars)
pairs(mtcars[,-c(1,8,9,10,11)])
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat)
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat,data=mtcars)
confint(fit)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
#make  am a factor column
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
str(mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
```{r gpm plot}
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
pairs(mtcars[,-c(1,2,8,9,10,11)])
?mtcars
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp)
summary(fit)
confint(fit)
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
for (i in c(2,5,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit))
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
pairs(mtcars, panel=panel.smooth, main="mtcars data")
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)[1,]
str(plot(fit))
class(plot(fit))
plot(fit)
a<-plot(fit)
class(a)
a[[1]]
a[1]
qqplot(fit)
qqplot(mtcars$weight,mtcars$gpm)
?qqplot
qqplot(mtcars$wt,mtcars$gpm)
plot(fit)
qqplot(mtcars$wt,mtcars$gpm)
plot(mtcars$wt,mtcars$gpm)
resid(fit)
plot(resid(fit))
qqplot(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
library(MASS)
?MASS
?shuttle
head(shuttle)
summary(shuttle)
library(MASS)
fit<-glm(use~wind,data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
m <- polr(use ~ wind,data = shuttle, Hess=TRUE)
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial(logit),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind*magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind-1,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
plot(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
hist(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
table(shuttle$auto,shuttle$wind)
materials<-c("Concrete","Straw bale", "Rammed earth", " Granite")
tc<-c(1.13,0.055,0.6,3.49)
density<-c(2300,120,2000,2880)
cp<-c(840,2000,837,840)
thermal.df<-data.frame(materials,tc,density,cp)
thermal.df
thermal.df$diff=thermal.df$tc/(thermal.df$density*thermal.df$cp)
thermal.df
gf<-(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
gf<-c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
tt<-c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
ed<-sqrt(sum((tt-gf)^2))
ed
setwd("H:/Rspace/MIT_AE/Unit6")
# After following the steps in the video, load the data into R
movies = read.table("./data/movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
# Add column names
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
# Remove duplicates
movies = unique(movies)
# Take a look at our data again:
str(movies)
?dist
table(movies)
table(movies$Comedy)
table(movies$Western)
table(movies$Romance & movies$Drama)
# Compute distances
distances = dist(movies[2:20], method = "euclidean")
# Hierarchical clustering
clusterMovies = hclust(distances, method = "ward.D")
# Plot the dendrogram
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
#Now let's figure out what the clusters are like.
# Let's use the tapply function to compute the percentage of movies in each genre and cluster
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
cluster2 = subset(movies, clusterGroups==2)
cluster2$Title[1:10]
clusterGroups
clusterGroups==2
clusterGroups2 = cutree(clusterMovies, k = 2)
head(clusterGroups2)
movies[6]
movies[6,]
str(clusterGroups)
str(clusterMovies)
tapply(movies$Action, clusterGroups, mean)
setwd("H:/Rspace/MIT_AE/Unit6")
flower = read.csv("./data/flower.csv", header=FALSE)
str(flower)
flowerMatrix = as.matrix(flower)
str(flowerMatrix)
flowerVector = as.vector(flowerMatrix)
str(flowerVector)
flowerVector2 = as.vector(flower)
str(flowerVector2)
distance = dist(flowerVector, method = "euclidean")
distance
class(distance)
str(distance)
# Hierarchical clustering
clusterIntensity = hclust(distance, method="ward.D")
# Plot the dendrogram
plot(clusterIntensity)
rect.hclust(clusterIntensity, k = 3, border = "red")
flowerClusters = cutree(clusterIntensity, k = 3)
flowerClusters
tapply(flowerVector, flowerClusters, mean)
dim(flowerClusters) = c(50,50)
image(flowerClusters, axes = FALSE)
dim(flowerClusters) = c(50,50)
image(flowerMatrix,axes=FALSE,col=grey(seq(0,1,length=256)))
healthy = read.csv("./data/healthy.csv", header=FALSE)
healthyMatrix = as.matrix(healthy)
str(healthyMatrix)
image(healthyMatrix,axes=FALSE,col=grey(seq(0,1,length=256)))
healthyVector = as.vector(healthyMatrix)
distance = dist(healthyVector, method = "euclidean")
str(healthyVector)
n<-365636
n*(n-1)/2
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
k = 5 # Why 5? Number of tissue classes? Use knowledge of system.
# Run k-means
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters = KMC$cluster
KMC$centers[2]
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters, axes = FALSE, col=rainbow(k))
