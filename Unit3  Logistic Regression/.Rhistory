odds
P
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2)) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))_ # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
tb<-data.frame("Allocation"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),c(27,33,39))
library(ggplot2)
tb<-data.frame("Category"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),"Allocation"=c(27,33,39))
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,colour=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
theme(legend.position="none")
d
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit3")
## UNDERSTANDING THE DATA
loans<-read.csv("./data/loans.csv")
str(loans)
summary(loans)
#head(songs)
## PREPARING THE DATASET
#1.1
sum(loans$not.fully.paid)/nrow(loans)
install.packages("mice")
library(mice)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
summary(loans)
str(loans)
loans<-read.csv("./data/loans.csv")
str(loans)
summary(loans)
?mice
?setdiff
?vars.for.imputation
vars.for.imputation
set.seed(144)
library(caTools)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
model1<-glm(not.fully.paid~.,family=binomial,data=train)
summary(model1)
test$predicted.risk = predict(model1, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk > 0.5)
ct
model1$conf
model1$coef
str(model1$coef)
model1$coef["fico"]
-(700-710)*model1$coef["fico"]
exp(-(700-710)*model1$coef["fico"])
(700-710)*model1$coef["fico"]
exp((700-710)*model1$coef["fico"])
test$predicted.risk = predict(model1, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk > 0.5)
ct
#specificity
ct[1,1]/(ct[1,1]+ct[1,2])
#sensitivity
ct[2,2]/(ct[2,1]+ct[2,2])
#accuracy
(ct[1,1]+ct[2,2])/sum(ct)
#baseline accuracy
(ct[1,1]+ct[1,2])/sum(ct)
library(ROCR)
ROCRpred = prediction(test$predicted.risk, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
model2<-glm(not.fully.paid~int.rate,data=train)
summary(model2)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
#specificity
ct[1,1]/(ct[1,1]+ct[1,2])
#sensitivity
ct[2,2]/(ct[2,1]+ct[2,2])
#accuracy
(ct[1,1]+ct[2,2])/sum(ct)
#baseline accuracy
(ct[1,1]+ct[1,2])/sum(ct)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
model2<-glm(not.fully.paid~int.rate,data=train)
summary(model2)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
test$predicted.riskbv = predict(model2, type="response", newdata=test)
max(test$predicted.riskbv)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
min(test$predicted.risk.bv)
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.2)
ct
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.4)
ct
model2<-glm(not.fully.paid~int.rate,family=binomial,data=train)
summary(model2)
#3.2
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
#3.1 - use just int.rate as predictor = bivariate model (bv)
model2<-glm(not.fully.paid~int.rate,family=binomial,data=train)
summary(model2)
#3.2
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
ROCRpred = prediction(test$predicted.risk.bv, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
c<-10
r<-6/100
t<-3
c*exp(rt)
c*exp(r*t)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
10*max(test$profit)
sum(100*test$profit)
sum((100/nrow(test))*test$profit)
sum((100/nrow(test))*test$profit)
highInterest<-subset(test,test$int.rate>=0.15)
mean(highinterest$profit)
highInterest<-subset(test,test$int.rate>=0.15)
mean(highInterest$profit)
=sum(test$profit[test$not.fully.paid == 1])
sum(test$profit[test$not.fully.paid == 1])
sum(highInterest$profit[highInterest$not.fully.paid == 1])
-sum(highInterest$profit[highInterest$not.fully.paid == 1])/nrow(highInterest)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk<=cutoff)
nrow(selectedLoans)
sum(selectedLoans$profit)
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk.bv<=cutoff)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk<=cutoff)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
str(selectedLoans)
utoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>=highInterest$predicted.risk)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>=highInterest$predicted.risk)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>=highInterest$predicted.risk.bv)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>=highInterest$predicted.risk.bv)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
tail(selectedLoans)
#6.2
#among these, select the 100 loans predicted to have lowest risk
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>highInterest$predicted.risk.bv)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
#6.2
#among these, select the 100 loans predicted to have lowest risk
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,cutoff>=highInterest$predicted.risk.bv)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk.bv, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk.bv<=cutoff)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk<=cutoff)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
length(selectedLoans$profit)
summary(selectedLoans)
loans<-read.csv("./data/loans_imputed.csv")
loans<-read.csv("./data/loans_imputed.csv")
##PREDICTION MODELS
#2.1 split into testing and training
set.seed(144)
library(caTools)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
#glm model on all independent variables.
#Which are significant?
model1<-glm(not.fully.paid~.,family=binomial,data=train)
summary(model1)
#2.2
#A:fico 700; B:fico 710
#ratio of l;og odds
(700-710)*model1$coef["fico"]
#ratio of odds (odds A / odds B)
exp((700-710)*model1$coef["fico"])
#2.3
test$predicted.risk = predict(model1, type="response", newdata=test)
ct<-table(test$not.fully.paid, test$predicted.risk > 0.5)
ct
#specificity
ct[1,1]/(ct[1,1]+ct[1,2])
#sensitivity
ct[2,2]/(ct[2,1]+ct[2,2])
#accuracy
(ct[1,1]+ct[2,2])/sum(ct)
#baseline accuracy
(ct[1,1]+ct[1,2])/sum(ct)
#2.4 Use the ROCR package to compute the test set AUC.
library(ROCR)
ROCRpred = prediction(test$predicted.risk, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
##A "SMART BASELINE"
#3.1 - use just int.rate as predictor = bivariate model (bv)
model2<-glm(not.fully.paid~int.rate,family=binomial,data=train)
summary(model2)
#3.2
test$predicted.risk.bv = predict(model2, type="response", newdata=test)
max(test$predicted.risk.bv)
ct<-table(test$not.fully.paid, test$predicted.risk.bv > 0.5)
ct
#3.3 AUC of bivariate model
ROCRpred = prediction(test$predicted.risk.bv, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
##4.1 COMPUTING THE PROFITABILITY OF AN INVESTMENT
c<-10
r<-6/100
t<-3
c*exp(r*t)
##5.1 A SIMPLE INVESTMENT STRATEGY
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
10*max(test$profit)
#6.1 - AN INVESTMENT STRATEGY BASED ON RISK
#invest $100 evenly split between all loans - profit is:
sum((100/nrow(test))*test$profit)
#pick out the high interest loans
highInterest<-subset(test,test$int.rate>=0.15)
#average profit on $1 investment
mean(highInterest$profit)
#proportion of these that do not pay back fully
-sum(highInterest$profit[highInterest$not.fully.paid == 1])/nrow(highInterest)
#6.2
#among these, select the 100 loans predicted to have lowest risk
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans<-subset(highInterest,highInterest$predicted.risk<=cutoff)
nrow(selectedLoans)
#profit if invest $1 in each of these loans
sum(selectedLoans$profit)
#how many of these do not pay back?
-sum(selectedLoans$profit[selectedLoans$not.fully.paid == 1])
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
selectedLoans<-subset(highInterest,highInterest$predicted.risk<=0.1763305)
nrow(selectedLoans)
sum(selectedLoans$profit)
