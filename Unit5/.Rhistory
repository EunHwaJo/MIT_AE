histogram( ~ hp | cyl , data = mtcars)
bwplot( ~ hp | cyl , data = mtcars)
par(mar=c(3,3,2,0.5))
xyplot(mpg ~ disp | trans, data=mtcars)
par(mar=c(3,3,2,0.5))
plot.regression = function(x,y) {;
panel.xyplot(x,y);
panel.abline(lm(y~x));
}
xyplot(mpg ~ wt | trans, panel = plot.regression,data=mtcars)
fit<-lm(gpm~disp+hp+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~disp+hp+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp-1,data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(mpg~wt+disp+hp+qsec+facyor(cyl)+factor(am))
fit<-lm(gpm~wt+disp+hp+qsec+facyor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(am),data=mtcars)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans),data=mtcars)
summary(fit)
fit<-lm(gpm~wt+disp+hp+qsec+factor(cyl)+factor(trans)-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+gm_smooth(method=lm)
ggplot(data=mtcars,aes(x=wt-mean(wt),y=gpm,colour=trans))+geom_point()+geom_smooth(method=lm)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt+factor(cyl),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+wt-mean(wt),data=mtcars)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
fit$confint
confint(fit)
fit<-lm(mpg~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(hp-mean(hp))-1,data=mtcars)
summary(fit)
confint(fit)
mean(wt)
mean(mtcars$wt)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
resid(fit)
plot(resid(fit))
qqplot(resid(fit))
help(resid)
?resid
plot(fit)
par(2,2)
par(mfrow=c(2,2))
plot(m)
plot(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
confint(fit)
plot(fit)
plot(fit)
mfrow=c(2,2)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
plot(fit)
summary(fit)
qqplot
?qqplot
auto<-subset(mtcars(trans=="auto"))
auto<-subset(mtcars[trans=="auto"])
str(mtcars)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars,var=TRUE)
?lm
m<-mtcars[trans=="manual",]
m<-mtcars[mtcars$trans=="manual",]
a<-mtcars[mtcars$trans=="auto",]
qqplot(m$gpm,a$gpm)
qqlm<-lm(m$gpm~a$gpm)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt)),data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))-1,data=mtcars)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec)),data=mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11)])
fit<-lm(gpm~factor(trans)+I(wt-mean(wt))+I(qsec-mean(qsec))+I(disp-mean(disp))+I(hp-mean(hp)),data=mtcars)
confint(fit)
summary(fit)
?mtcars
pairs(mtcars)
pairs(mtcars[,-c(1,8,9,10,11)])
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat)
fit<-lm(gpm~factor(cyl)+factor(trans)+wt+disp+hp+qsec+drat,data=mtcars)
confint(fit)
summary(fit)
fit<-lm(gpm~factor(trans)+wt,data=mtcars)
summary(fit)
fit<-lm(gpm~factor(trans)+wt-1,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
#make  am a factor column
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
str(mtcars)
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
```{r gpm plot}
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
pairs(mtcars[,-c(1,2,8,9,10,11,12)])
pairs(mtcars[,-c(1,2,8,9,10,11)])
?mtcars
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp)
summary(fit)
confint(fit)
fit<-lm(mpg~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp,data=mtcars)
summary(fit)
confint(fit)
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
for (i in c(2,5,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
library(dplyr)
library(ggplot2)
data(mtcars)
str(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i]=factor(mtcars[,i])}
mtcars$gpm<-100/mtcars$mpg
pairs(mtcars[,-c(1,2,8,9,10,11)])
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt+disp+qsec+hp-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit))
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit
confint(fit)
fit<-lm(gpm~factor(am)+wt-1,data=mtcars)
summary(fit)
confint(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
pairs(mtcars, panel=panel.smooth, main="mtcars data")
pairs(mtcars[,-c(1,2,5,8,9,10,11)])
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)[1,]
str(plot(fit))
class(plot(fit))
plot(fit)
a<-plot(fit)
class(a)
a[[1]]
a[1]
qqplot(fit)
qqplot(mtcars$weight,mtcars$gpm)
?qqplot
qqplot(mtcars$wt,mtcars$gpm)
plot(fit)
qqplot(mtcars$wt,mtcars$gpm)
plot(mtcars$wt,mtcars$gpm)
resid(fit)
plot(resid(fit))
qqplot(fit)
fit<-lm(gpm~factor(am)+wt,data=mtcars)
summary(fit)
confint(fit)
plot(fit)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
library(MASS)
?MASS
?shuttle
head(shuttle)
summary(shuttle)
library(MASS)
fit<-glm(use~wind,data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
fit
library(MASS)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind+magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family="binomial",data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
m <- polr(use ~ wind,data = shuttle, Hess=TRUE)
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
summary(m)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial,data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial(logit),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
fit<-glm(formula=use~wind*magn,family="binomial",data=shuttle)
summary(fit)
exp(-0.03201)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind-1,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
fit<-glm(formula=use~wind,family=binomial("logit"),data=shuttle)
summary(fit)
exp(-0.03181)
exp(fit$coef[2])
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
plot(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
hist(shuttle$auto,shuttle$wind)
library(MASS)
str(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
table(shuttle$auto,shuttle$wind)
emails = read.csv("./data/emails.csv", stringsAsFactors=FALSE)
str(emails)
#1.1 How many emails?
nrow(emails)
#1.2 How many of these were spam?
sum(emails$spam)
#1.3 How many characters in longest email
emails$nchar<-nchar(emails$text)
max(emails$nchar)
#1.4 which row has the shortest email?
emails[nchar(emails$text)==min(nchar(emails$text)),]
## PREPARING THE CORPUS
#2.1 Create corpus
library(tm)
corpus = Corpus(VectorSource(emails$text))
# Pre-process data
corpus = tm_map(corpus, tolower)
# IMPORTANT NOTE: If you are using the latest version of the tm package, you will need to run the following line before continuing (it converts corpus to a Plain Text Document). This is a recent change having to do with the tolower function that occurred after this video was recorded.
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
length(stopwords("english"))
#create a matrix
dtm = DocumentTermMatrix(corpus)
dtm
ncol(dtm)
#2.2 Remove sparse terms
spdtm= removeSparseTerms(dtm, 0.95)
ncol(spdtm)
# 2.3 Create data frame
emailsSparse = as.data.frame(as.matrix(spdtm))
names(emailsSparse)<-make.names(names(emailsSparse))
# which word occurs most frequently
library(dplyr)
sums<-as.numeric(colSums(emailsSparse))
names<-names(emailsSparse)
Absums<-data.frame(names,sums)
arrange(Absums,-sums)[1,]
# achieves the same in one line of code!
which.max(colSums(emailsSparse))
#2.4
emailsSparse$spam=emails$spam
ham<-subset(emailsSparse,emailsSparse$spam==0)
which(colSums(ham)>=5000)
#2.5
spam<-subset(emailsSparse,emailsSparse$spam==1)
which(colSums(spam)>=1000)
## BUILDING MACHINE LEARNING MODELS
#3.1
#Create training and test sets
emailsSparse$spam = as.factor(emailsSparse$spam)
library(caTools)
library(rpart)
library(rpart.plot)
set.seed(123)
spl = sample.split(emailsSparse$spam, 0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam~.,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog, newdata=test)
setwd("H:/Rspace/MIT_AE/Unit5")
emails = read.csv("./data/emails.csv", stringsAsFactors=FALSE)
str(emails)
#1.1 How many emails?
nrow(emails)
#1.2 How many of these were spam?
sum(emails$spam)
#1.3 How many characters in longest email
emails$nchar<-nchar(emails$text)
max(emails$nchar)
#1.4 which row has the shortest email?
emails[nchar(emails$text)==min(nchar(emails$text)),]
## PREPARING THE CORPUS
#2.1 Create corpus
library(tm)
corpus = Corpus(VectorSource(emails$text))
# Pre-process data
corpus = tm_map(corpus, tolower)
# IMPORTANT NOTE: If you are using the latest version of the tm package, you will need to run the following line before continuing (it converts corpus to a Plain Text Document). This is a recent change having to do with the tolower function that occurred after this video was recorded.
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
length(stopwords("english"))
#create a matrix
dtm = DocumentTermMatrix(corpus)
dtm
ncol(dtm)
#2.2 Remove sparse terms
spdtm= removeSparseTerms(dtm, 0.95)
ncol(spdtm)
# 2.3 Create data frame
emailsSparse = as.data.frame(as.matrix(spdtm))
names(emailsSparse)<-make.names(names(emailsSparse))
# which word occurs most frequently
library(dplyr)
sums<-as.numeric(colSums(emailsSparse))
names<-names(emailsSparse)
Absums<-data.frame(names,sums)
arrange(Absums,-sums)[1,]
# achieves the same in one line of code!
which.max(colSums(emailsSparse))
#2.4
emailsSparse$spam=emails$spam
ham<-subset(emailsSparse,emailsSparse$spam==0)
which(colSums(ham)>=5000)
#2.5
spam<-subset(emailsSparse,emailsSparse$spam==1)
which(colSums(spam)>=1000)
## BUILDING MACHINE LEARNING MODELS
#3.1
#Create training and test sets
emailsSparse$spam = as.factor(emailsSparse$spam)
library(caTools)
library(rpart)
library(rpart.plot)
set.seed(123)
spl = sample.split(emailsSparse$spam, 0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam~.,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog, newdata=test)
str(predLog)
sort(predLog)
?predict
nrow(train)
nrow(predLog)
library(caTools)
library(rpart)
library(rpart.plot)
set.seed(123)
spl = sample.split(emailsSparse$spam, 0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam~.,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog, newdata=test)
str(train)
predLog<-predict(spamLog,data=train)
str(predLog)
plot(predLog)
predLog<-predict(spamLog)
plot(predLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
max(predLog)
spamLog<-glm(spam~.,data=train)
summary(spamLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
max(predLog)
set.seed(123)
spl = sample.split(emailsSparse$spam, splitRatio =0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam~.,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
max(predLog)
set.seed(123)
spl = sample.split(emailsSparse$spam, SplitRatio =0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam~.,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
max(predLog)
spamLog<-glm(spam ~ . ,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog,newdata=train)
plot(predLog)
max(predLog)
nrow(train)
nrow(test)
predLog<-predict(spamLog)
plot(predLog)
max(predLog)
predLog<-predict(spamLog,train,type="response")
plot(predLog)
max(predLog)
