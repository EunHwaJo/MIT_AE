logit<-ln(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2)) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))_ # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
tb<-data.frame("Allocation"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),c(27,33,39))
library(ggplot2)
tb<-data.frame("Category"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),"Allocation"=c(27,33,39))
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,colour=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
theme(legend.position="none")
d
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit5")
## MITx Analytics Edge
## Michael Hunt
## Unit 5 Assignment Three
## SEPARATING SPAM FROM HAM (PART 1)
# Load the dataset
emails = read.csv("./data/emails.csv", stringsAsFactors=FALSE)
str(emails)
#1.1 How many emails?
nrow(emails)
#1.2 How many of these were spam?
sum(emails$spam)
#1.3 How many characters in longest email
emails$nchar<-nchar(emails$text)
max(emails$nchar)
#1.4 which row has the shortest email?
emails[nchar(emails$text)==min(nchar(emails$text)),]
## PREPARING THE CORPUS
#2.1 Create corpus
library(tm)
corpus = Corpus(VectorSource(emails$text))
# Pre-process data
corpus = tm_map(corpus, tolower)
# IMPORTANT NOTE: If you are using the latest version of the tm package, you will need to run the following line before continuing (it converts corpus to a Plain Text Document). This is a recent change having to do with the tolower function that occurred after this video was recorded.
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
length(stopwords("english"))
#create a matrix
dtm = DocumentTermMatrix(corpus)
dtm
ncol(dtm)
#2.2 Remove sparse terms
spdtm= removeSparseTerms(dtm, 0.95)
ncol(spdtm)
# 2.3 Create data frame
emailsSparse = as.data.frame(as.matrix(spdtm))
names(emailsSparse)<-make.names(names(emailsSparse))
# which word occurs most frequently
library(dplyr)
sums<-as.numeric(colSums(emailsSparse))
names<-names(emailsSparse)
Absums<-data.frame(names,sums)
arrange(Absums,-sums)[1,]
# achieves the same in one line of code!
which.max(colSums(emailsSparse))
#2.4
emailsSparse$spam=emails$spam
ham<-subset(emailsSparse,emailsSparse$spam==0)
which(colSums(ham)>=5000)
#2.5
spam<-subset(emailsSparse,emailsSparse$spam==1)
which(colSums(spam)>=1000)
## BUILDING MACHINE LEARNING MODELS
#3.1
#Create training and test sets
emailsSparse$spam = as.factor(emailsSparse$spam)
library(caTools)
library(rpart)
library(rpart.plot)
set.seed(123)
spl = sample.split(emailsSparse$spam, SplitRatio =0.7)
train = subset(emailsSparse, spl == TRUE)
test = subset(emailsSparse, spl == FALSE)
#Train Logistic regression model
spamLog<-glm(spam ~ . ,family=binomial,data=train)
summary(spamLog)
predLog<-predict(spamLog,train,type="response")
#plot(predLog)
predLog<-data.frame(predLog)
nrow(subset(predLog,predLog<0.00001))
nrow(subset(predLog,predLog>0.99999))
nrow(predLog)-nrow(subset(predLog,predLog<0.00001))-nrow(subset(predLog,predLog>0.99999))
# CART model
spamCART = rpart(spam~., data=train, method="class")
prp(spamCART)
predCART<-predict(spamCART,train)
predCART.prob = predCART[,2]
#3.4 Training set accuracy of SpamLog, (@thr = 0.5)
ct<-table(train$spam,predLog >= 0.5)
ct
sum(diag(ct))/sum(ct)
#3.5 tTraining set AUC of SpamLog
library(ROCR)
ROCRLogtrain = prediction(predLog, train$spam)
auc = as.numeric(performance(ROCRLogtrain, "auc")@y.values)
auc
#3.6 Training set accuracy of spamCART
ct<-table(train$spam,predCART.prob >= 0.5)
ct
sum(diag(ct))/sum(ct)
#3.7 tTraining set AUC of SpamCART
library(ROCR)
ROCRCARTtrain = prediction(predCART.prob, train$spam)
auc = as.numeric(performance(ROCRCARTtrain, "auc")@y.values)
auc
#3.8 Random Forest model
# What is the training set accuracy of spamRF, using a threshold of 0.5 for predictions?
library(randomForest)
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF)
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
#3.9 tTraining set AUC of SpamRF
library(ROCR)
ROCRRFtrain = prediction(predCART.prob, train$spam)
auc = as.numeric(performance(ROCRRFtrain, "auc")@y.values)
auc
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF,type="response")
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest = predict(spamRF,type="prob")
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest = predict(spamRF,type="prob")
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest = predict(spamRF,type="prob")
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest = predict(spamRF)
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest = predict(spamRF,train)
ctrf<-table(train$spam, PredictForest)
ctrf
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF,train)
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF)
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
prp(spamRF)
PredictForest.prob = PredictForest[,2]
PredictForest = predict(spamRF)
PredictForest
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
predCART.prob
library(ROCR)
ROCRRFtrain = prediction(PredictForest, train$spam)
auc = as.numeric(performance(ROCRRFtrain, "auc")@y.values)
auc
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF,train)
ctrf<-table(train$spam, PredictForest)
ctrf
set.seed(123)
spamRF = randomForest(spam ~ ., data = train)
PredictForest = predict(spamRF,train,type="prob")
ctrf<-table(train$spam, PredictForest)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
PredictForest
PredictForest.prob = PredictForest[,2]
ctrf<-table(train$spam, PredictForest.prob>0.5)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
library(ROCR)
ROCRRFtrain = prediction(PredictForest.prob, train$spam)
auc = as.numeric(performance(ROCRRFtrain, "auc")@y.values)
auc
PredictForestTest = predict(spamRF,test,type="prob")
PredictForest.Test.prob = PredictForestTest[,2]
ctrf<-table(test$spam, PredictForest.Test.prob>0.5)
ctrf
#accuracy on test set
sum(diag(ctrf))/sum(ctrf)
ROCRRFtest = prediction(PredictForest.Test.prob, test$spam)
auc = as.numeric(performance(ROCRRFtest, "auc")@y.values)
auc
#LOgistic model
PredictLogTest = predict(spamLog,test,type="prob")
PredictLog.Test.prob = PredictLogTest[,2]
ctrf<-table(test$spam, PredictLog.Test.prob>0.5)
ctrf
#accuracy of SpamRF on test set
sum(diag(ctrf))/sum(ctrf)
#AUC of SpamRF on test set
ROCRLogtest = prediction(PredictLog.Test.prob, test$spam)
auc = as.numeric(performance(ROCRLogtest, "auc")@y.values)
auc
PredictLogTest<-predict(spamLog,train,type="response")
PredictLog.Test.prob = PredictLogTest[,2]
PredictLogTest<-predict(spamLog,train,type="response")
ctrf<-table(test$spam, PredictLogTest>0.5)
ctrf
#accuracy of SpamLog on test set
sum(diag(ctrf))/sum(ctrf)
#AUC of SpamLog on test set
ROCRLogtest = prediction(PredictLogTest, test$spam)
auc = as.numeric(performance(ROCRLogtest, "auc")@y.values)
auc
PredictLogTest<-predict(spamLog,train,type="response")
ctrf<-table(test$spam, PredictLogTest>0.5)
PredictLogTest
ctrf<-table(test$spam, PredictLogTest>0.5)
PredictLogTest<-predict(spamLog,test,type="response")
ctrf<-table(test$spam, PredictLogTest>0.5)
ctrf
#accuracy of SpamLog on test set
sum(diag(ctrf))/sum(ctrf)
#AUC of SpamLog on test set
ROCRLogtest = prediction(PredictLogTest, test$spam)
auc = as.numeric(performance(ROCRLogtest, "auc")@y.values)
auc
spamCARTtest = rpart(spam~., data=test, method="class")
prp(spamCARTtest)
predCARTtest<-predict(spamCARTtest,test)
predCARTtest.prob = predCARTtest[,2]
spamCARTtest = rpart(spam~., data=test, method="class")
prp(spamCARTtest)
predCARTtest<-predict(spamCARTtest,test)
predCARTtest.prob = predCARTtest[,2]
#accuracy of SpamCART on test set
ct<-table(test$spam,predCARTtest.prob >= 0.5)
ct
sum(diag(ct))/sum(ct)
#Test set AUC of SpamCART
ROCRCARTtest = prediction(predCARTtest.prob, test$spam)
auc = as.numeric(performance(ROCRCARTtest, "auc")@y.values)
auc
predCARTtest.prob = predict(spamCART, newdata=test)[,2]
#accuracy of SpamCART on test set
ct<-table(test$spam,predCARTtest.prob >= 0.5)
ct
sum(diag(ct))/sum(ct)
#Test set AUC of SpamCART
ROCRCARTtest = prediction(predCARTtest.prob, test$spam)
auc = as.numeric(performance(ROCRCARTtest, "auc")@y.values)
auc
table(predLog < 0.00001)
predTrainLog<-data.frame(predTrainLog)
table(predTrainLog < 0.00001)
table(predTrainLog > 0.99999)
table(predTrainLog >= 0.00001 & predTrainLog <= 0.99999)
spamLog<-glm(spam ~ . ,family=binomial,data=train)
summary(spamLog)
predTrainLog<-predict(spamLog,train,type="response")
#plot(predLog)
predTrainLog<-data.frame(predTrainLog)
table(predTrainLog < 0.00001)
table(predTrainLog > 0.99999)
table(predTrainLog >= 0.00001 & predTrainLog <= 0.99999)
