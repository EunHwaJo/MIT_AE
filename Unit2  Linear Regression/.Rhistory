fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
#predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
#predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
#predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")#+
#geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
head(predx)
head(pred.int)
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
# ''' confidence interval
conf..int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "confidence", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five- Prediction interval") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")+
geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
# ''' confidence interval
conf.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "confidence", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five- Prediction interval") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")+
geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
delta<-2*(beta1+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2])
delta
---
---
title: "JHU_RM_Q3"
author: "mbh"
date: "Tuesday, June 16, 2015"
output: html_document
---
##Load and inspect data
```{r load data}
str(mtcars)
```
## Question One
Consider the mtcars data set. Fit a model with mpg as the outcome that includes number of cylinders as a factor
variable and weight as confounder.
Give the adjusted estimate for the expected change in mpg comparing 8 cylinders to 4.
-4.256
-3.206
-6.071
33.991
```{r q1}
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
fitnf<-lm(mpg~cyl+wt,data=mtcars)
summary(fitnf)
```
## Question Three
Consider the mtcars data set. Fit a model with mpg as the outcome that considers number of cylinders as a factor variable and weight as confounder. Now fit a second model with mpg as the outcome model that considers the interaction between number of cylinders (as a factor variable) and weight. Give the P-value for the likelihood ratio test comparing the two models and suggest a model using 0.05 as a type I error rate significance benchmark.InsectSprays
The P-value is small (less than 0.05). So, according to our criterion, we reject, which suggests that the interaction term is not necessary.
The P-value is larger than 0.05. So, according to our criterion, we would fail to reject, which suggests that the interaction terms is necessary.
The P-value is small (less than 0.05). Thus it is surely true that there is no interaction term in the true model.
The P-value is small (less than 0.05). So, according to our criterion, we reject, which suggests that the interaction term is necessary
The P-value is small (less than 0.05). Thus it is surely true that there is an interaction term in the true model.
The P-value is larger than 0.05. So, according to our criterion, we would fail to reject, which suggests that the interaction terms may not be necessary.
```{r q3}
fitcf<-lm(mpg~factor(cyl)+wt,data=mtcars)
fitint<-lm(mpg~factor(cyl)*wt,data=mtcars)
summary(fitcf)
summary(fitint)
```
##Question Four
```{r q4}
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4
fit4nf<-lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
fit4nf
```
## Question Five
Question 5
Consider the following data set
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
Give the hat diagonal for the most influential point
0.2025
0.9946
0.2804
0.2287
```{r q5}
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit5<-lm(y~x,data=df)
summary(fit5)
hatvalues(fit5)
```
## Question Six
```{r q6}
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit6<-lm(y~x,data=df)
dfbeta(fit6)
```
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
fitnf<-lm(mpg~cyl+wt,data=mtcars)
summary(fitnf)
fitcf<-lm(mpg~factor(cyl)+wt,data=mtcars)
fitint<-lm(mpg~factor(cyl)*wt,data=mtcars)
summary(fitcf)
summary(fitint)
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4
fit4nf<-lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
fit4nf
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit5<-lm(y~x,data=df)
summary(fit5)
hatvalues(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df<-data.frame(x,y)
fit6<-lm(y~x,data=df)
dfbeta(fit6)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
am<-as.factor(mtcars$am)
mtwide<-mutate(mtcars,amf)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
am<-as.factor(mtcars$am)
#mtwide<-mutate(mtcars,amf)
str(mtcars)
library(dplyr)
data(mtcars)
str(mtcars)
#make an am factor column
mtcars$am<-as.factor(mtcars$am)
#mtwide<-mutate(mtcars,amf)
str(mtcars)
library(dplyr)
data(mtcars)
str(mtcars)
#make  am a factor column
mtcars$am<-as.factor(mtcars$am)
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtwide,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
library(ggplot2)
mtcars$gpm<-100/mtcars$mpg
g<-ggplot(data=mtcars,aes(x=wt,y=gpm,colour=am))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g
lm1<-lm(gpm~factor(am),data=mtcars)
lm1
lm(gpm~factor(am)*wt,data=mtcars)
summary(lm(gpm~factor(am)*wt,data=mtcars))
summary(lm(gpm~factor(am)*wt-1,data=mtcars))
summary(lm(gpm~factor(am)+wt-1,data=mtcars))
summary(lm(gpm~factor(am)+wt,data=mtcars))
g2<-ggplot(data=mtcars,aes(x=wt,y=gpm))+
geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g2
data(ToothDown)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth,20)
unique(ToothGrowth[,1:3])
plot(len~donse,data=ToothGrowth)
plot(len~dose,data=ToothGrowth)
plot(len~supp,data=ToothGrowth)
library(gglplot2)
library(ggplot2
)
ggplot(data=ToothGrowth,aes(x=dose,y=len))+geom_boxplot()
ggplot(data=ToothGrowth,aes(x=factor(dose),y=len))+geom_boxplot()
table(ToothGrowth)
table(ToothGrowth$sup,ToothGrowth$dose)
fit<-lm(len~dose*supp,data=ToothGrowth)
summary(fit)
fit<-lm(len~supp*dose,data=ToothGrowth)
summary(fit)
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
library(dplyr)
library(ggplot2)
library(dplyr)
data(ToothGrowth)
str(ToothGrowth)
ToothGrowth$dose = factor(ToothGrowth$dose,
levels=c(0.5,1.0,2.0),
labels=c("low","med","high"))
str(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
boxplot(len ~ supp * dose, data=ToothGrowth,
ylab="Tooth Length",main="Boxplots of Tooth Growth Data")
?interaction.plot
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
boxplot(len ~ supp * dose, data=ToothGrowth,
ylab="Tooth Length",main="Boxplots of Tooth Growth Data")
boxplot(len ~ supp , data=ToothGrowth,
ylab="Tooth Length",main="Tooth Growth Data by dose type")
boxplot(len ~ dose , data=ToothGrowth,
ylab="Tooth Length",main="Tooth Growth Data by dose strength")
with(ToothGrowth, tapply(len, list(supp,dose), mean))
with(ToothGrowth, tapply(len, list(supp,dose), var))
aov.out = aov(len ~ supp * dose, data=ToothGrowth)
model.tables(aov.out, type="means", se=T)
bartlett.test(len ~ supp * dose, data=ToothGrowth)
?bartlett.test
bartlett.test(len ~ supp, data=ToothGrowth)
bartlett.test(len ~ dose, data=ToothGrowth)
bartlett.test(len ~ dose*supp, data=ToothGrowth)
bartlett.test(len ~ (dose*supp), data=ToothGrowth)
aov.tooth = aov(len ~ supp * dose, data=ToothGrowth)
summary(aov.tooth)
TukeyHSD(aov.out)
TukeyHSD(aov.tooth)
plot(TukeyHSD(aov.tooth))
plot(plot(TukeyHSD(aov.tooth))
)
plot(TukeyHSD(aov.tooth))
plot(TukeyHSD(aov.tooth))[[1]]
plot(TukeyHSD(aov.tooth))[1]
?plot(TukeyHSD(aov.tooth))[1]
?attributes
attributes(plot(TukeyHSD(aov.tooth)))
str(plot(TukeyHSD(aov.tooth)))
str(plot(TukeyHSD(aov.tooth)))
summary(plot(TukeyHSD(aov.tooth)))
plot(TukeyHSD(aov.tooth))[1,1]
![](TukeyPlotTooth.png)
plot(TukeyHSD(aov.tooth))
![](TukeyPlotTooth.png)
plot(TukeyHSD(aov.tooth))
![TukeyPlot](TukeyPlotTooth.png)
plot(TukeyHSD(aov.tooth))
bartlett.test(len ~ dose, data=ToothGrowth) # by dose
bartlett.test(len ~ supp, data=ToothGrowth) # by supp
?interaction.plot
plot(aov.tooth)
plot(aov.tooth)[[1]]
par(mfrow=c(1,2))
#plot(fit)
plot(aov.toorh$fitted.values,aov.tooth$residuals,xlab="fitted values",ylab="residuals",main="Residual Plot")
abline(0,0,col="red")
qqnorm(resid(aov.tooth))
par(mfrow=c(1,2))
#plot(fit)
plot(aov.tooth$fitted.values,aov.tooth$residuals,xlab="fitted values",ylab="residuals",main="Residual Plot")
abline(0,0,col="red")
qqnorm(resid(aov.tooth))
bartlett.test(len ~ supp, data=ToothGrowth) # by supp
bartlett.test(len ~ interaction(supp,dose), data=ToothGrowth)
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit2")
library(dplyr)
library(lubridate)
## CLIMATE CHANGE
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/climate_change.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/climate_change.csv"
download.file(fileURL,destfile="./data/climate_change.csv")
#include date of download
}
cc<-read.csv("./data/climate_change.csv",stringsAsFactors=FALSE)
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit2")
library(dplyr)
library(lubridate)
## CLIMATE CHANGE
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/climate_change.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/climate_change.csv"
download.file(fileURL,destfile="./data/climate_change.csv")
#include date of download
}
cc<-read.csv("./data/climate_change.csv",stringsAsFactors=FALSE)
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit2")
library(dplyr)
library(lubridate)
## CLIMATE CHANGE
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/climate_change.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/climate_change.csv"
download.file(fileURL,destfile="./data/climate_change.csv")
#include date of download
}
cc<-read.csv("./data/climate_change.csv",stringsAsFactors=FALSE)
str(cc)
trn<-filter(cc,Year<2007)
tst<-filter(cc,Year>=2007)
#training set
trn<-filter(cc,Year<2007)
#testing set
tst<-filter(cc,Year>=2007)
tempfit<-lm(Temp~MEI+CO2+CH4+N2O+CFC.11+CFC.12+TSI+Aerosols,data=trn)
summary(tempfit)
