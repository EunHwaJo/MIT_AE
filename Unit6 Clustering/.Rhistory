geom_point()+
geom_smooth(method=lm)+
#facet_wrap(~amf,shrink=FALSE)+
labs(x = "Weight / 1000 lb",y = "Gallons per 100 miles")
g2
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-ln(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2))
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-beta0+beta1*x1+beta2*x2)) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))_ # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
beta0=-1.5
beta1=3
beta2=-0.5
x1=1
x2=5
P<-1/(1+exp(-(beta0+beta1*x1+beta2*x2))) # =P(y=1)
logit<-log(P/(1-P))
logit
odds<-exp(logit)
odds
P # =P(y=1)
tb<-data.frame("Allocation"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),c(27,33,39))
library(ggplot2)
tb<-data.frame("Category"=c("Pay costs","Devolved to depts. for CPD","Central Funding"),"Allocation"=c(27,33,39))
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,colour=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2)
)
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
theme(legend.position="none")
d
source('C:/Users/Mike/Rspace/RECM/thermalMass.r', echo=TRUE)
library(swirl)
swirl()
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,"date'])
)
class(hits[,"date"])
as.integer(head(hits[,"data"]))
as.integer(head(hits[,"date"]))
mdl<-glm(visits~date,family=poisson,data=hits)
summary(mdl)
exp(confint(mdl,"date"))
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-offset=log(visits+1)
mdl2<-log(visits+1)
mdl2<-glm$offset
?
## THE ANALYTICS EDGE 15.071x
## UNIT 6 A3
## Michael Hunt
## July 2015
## PREDICTING STOCK RETURNS WITH CLUSTER-THEN-PREDICT
# ReturnJan = the return for the company's stock during January (in the year of the observation).
# ReturnFeb = the return for the company's stock during February (in the year of the observation).
# ReturnMar = the return for the company's stock during March (in the year of the observation).
# ReturnApr = the return for the company's stock during April (in the year of the observation).
# ReturnMay = the return for the company's stock during May (in the year of the observation).
# ReturnJune = the return for the company's stock during June (in the year of the observation).
# ReturnJuly = the return for the company's stock during July (in the year of the observation).
# ReturnAug = the return for the company's stock during August (in the year of the observation).
# ReturnSep = the return for the company's stock during September (in the year of the observation).
# ReturnOct = the return for the company's stock during October (in the year of the observation).
# ReturnNov = the return for the company's stock during November (in the year of the observation).
# PositiveDec = whether or not the company's stock had a positive return in December (in the year of the observation).
#   This variable takes value 1 if the return was positive, and value 0 if the return was not positive.
# For the first 11 variables, the value stored is a proportional change in stock value during that month.
# For instance, a value of 0.05 means the stock increased in value 5% during the month, while a value
# of -0.02 means the stock decreased in value 2% during the month.
# load data into R
stocks<-read.csv("./data/StocksCluster.csv")
str(stocks)
summary(stocks)
# proportion of stocks giving positive returns in December
mean(stocks$PositiveDec)
# pairwise correlations between all the Return variables
round(cor(stocks[,1:11]),3)
library(Matrix)
max(cor(stocks[,1:11])-Diagonal(11))
summary(stocks)
## INITIAL LOGISTIC REGRESSION MODEL
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel<-glm(PositiveDec~.,family=binomial,data=stocksTrain)
setwd("C:/Users/Mike/Rspace/MIT_AE/Unit6")
## THE ANALYTICS EDGE 15.071x
## UNIT 6 A3
## Michael Hunt
## July 2015
## PREDICTING STOCK RETURNS WITH CLUSTER-THEN-PREDICT
# ReturnJan = the return for the company's stock during January (in the year of the observation).
# ReturnFeb = the return for the company's stock during February (in the year of the observation).
# ReturnMar = the return for the company's stock during March (in the year of the observation).
# ReturnApr = the return for the company's stock during April (in the year of the observation).
# ReturnMay = the return for the company's stock during May (in the year of the observation).
# ReturnJune = the return for the company's stock during June (in the year of the observation).
# ReturnJuly = the return for the company's stock during July (in the year of the observation).
# ReturnAug = the return for the company's stock during August (in the year of the observation).
# ReturnSep = the return for the company's stock during September (in the year of the observation).
# ReturnOct = the return for the company's stock during October (in the year of the observation).
# ReturnNov = the return for the company's stock during November (in the year of the observation).
# PositiveDec = whether or not the company's stock had a positive return in December (in the year of the observation).
#   This variable takes value 1 if the return was positive, and value 0 if the return was not positive.
# For the first 11 variables, the value stored is a proportional change in stock value during that month.
# For instance, a value of 0.05 means the stock increased in value 5% during the month, while a value
# of -0.02 means the stock decreased in value 2% during the month.
# load data into R
stocks<-read.csv("./data/StocksCluster.csv")
str(stocks)
summary(stocks)
# proportion of stocks giving positive returns in December
mean(stocks$PositiveDec)
# pairwise correlations between all the Return variables
round(cor(stocks[,1:11]),3)
library(Matrix)
max(cor(stocks[,1:11])-Diagonal(11))
summary(stocks)
## INITIAL LOGISTIC REGRESSION MODEL
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel<-glm(PositiveDec~.,family=binomial,data=stocksTrain)
StocksModel<-glm(PositiveDec~.,family=binomial,data=stocksTrain)
predictLog = predict(StocksModel,data=stocksTrain,type="class")
max(predictLog)
ct<-table(stocksTrain$PositiveDec, predictLog >= 0.5)
ct
(sum(diag(ct)))/sum(ct)
predictLog = predict(StocksModel,data=stocksTrain,type="response")
max(predictLog)
ct<-table(stocksTrain$PositiveDec, predictLog >= 0.5)
ct
(sum(diag(ct)))/sum(ct)
predictLogTest = predict(StocksModel,newdata=stocksTest,type="response")
max(predictLogTest)
ctTest<-table(stocksTest$PositiveDec, predictLogTest >= 0.5)
ctTest
(sum(diag(ctTest)))/sum(ctTest)
mean(StocksTest$PositiveDec)
mean(stocksTest$PositiveDec)
ctTest[2,2]/sum(ctTest)
(ctTest[2,1]+ctTest[2,2])/sum(ctTest)
mean(normTrain$ReturnJan)
summary(normTrain)
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
mean(normTrain$ReturnJan)
summary(normTrain)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
# normalise the data - has effect of subtracting the mean, then dividing by st dev
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
mean(normTrain$ReturnJan)
mean(normTest$ReturnJan)
k = 3
# Run k-means on training set
set.seed(144)
km = kmeans(normTrain, centers = k, iter.max = 1000)
str(km)
summary(km)
table(km$cluster)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
str(clusterTest)
table(clusterTest)
table(clusterTest)
table(clusterTrain)
stocksTrain1<-subset(stocksTrain,clusterTrain==1)
summary(stocksTrain1)
nrow(stocksTrain1)
stocksTrain1<-subset(stocksTrain,clusterTrain==1)
nrow(stocksTrain1)
stocksTrain2<-subset(stocksTrain,clusterTrain==2)
nrow(stocksTrain2)
stocksTrain3<-subset(stocksTrain,clusterTrain==3)
nrow(stocksTrain3)
stocksTrain1<-subset(stocksTrain,clusterTrain==1)
nrow(stocksTrain1)
stocksTrain2<-subset(stocksTrain,clusterTrain==2)
nrow(stocksTrain2)
stocksTrain3<-subset(stocksTrain,clusterTrain==3)
nrow(stocksTrain3)
stocksTest1<-subset(stocksTest,clusterTest==1)
nrow(stocksTest1)
stocksTest2<-subset(stocksTest,clusterTest==2)
nrow(stocksTest2)
stocksTest3<-subset(stocksTest,clusterTest==3)
nrow(stocksTest3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
stocksModel1<-glm(PositiveDec~.,family=binomial,data=stocksTrain1)
stocksModel1<-glm(PositiveDec~.,family=binomial,data=stocksTrain1)
stocksModel2<-glm(PositiveDec~.,family=binomial,data=stocksTrain2)
stocksModel3<-glm(PositiveDec~.,family=binomial,data=stocksTrain3)
stocksModel1<-glm(PositiveDec~.,family=binomial,data=stocksTrain1)
summary(stocksModel1)
stocksModel2<-glm(PositiveDec~.,family=binomial,data=stocksTrain2)
summary(stocksModel2)
stocksModel3<-glm(PositiveDec~.,family=binomial,data=stocksTrain3)
summary(stocksModel3)
summary(stocksModel1)$coef
stocksModel1<-glm(PositiveDec~.,family=binomial,data=stocksTrain1)
summary(stocksModel1)$coef
stocksModel2<-glm(PositiveDec~.,family=binomial,data=stocksTrain2)
summary(stocksModel2)$coef
stocksModel3<-glm(PositiveDec~.,family=binomial,data=stocksTrain3)
summary(stocksModel3)$coef
predictLogTest1 = predict(stocksModel1,newdata=stocksTest1,type="response")
max(predictLogTest)
ctTest1<-table(stocksTest1$PositiveDec, predictLogTest1 >= 0.5)
ctTest1
(sum(diag(ctTest1)))/sum(ctTest1)
# cluster 1
predictLogTest1 = predict(stocksModel1,newdata=stocksTest1,type="response")
max(predictLogTest1)
ctTest1<-table(stocksTest1$PositiveDec, predictLogTest1 >= 0.5)
ctTest1
(sum(diag(ctTest1)))/sum(ctTest1)
# cluster 2
predictLogTest2 = predict(stocksModel2,newdata=stocksTest2,type="response")
max(predictLogTest2)
ctTest2<-table(stocksTest2$PositiveDec, predictLogTest2 >= 0.5)
ctTest2
(sum(diag(ctTest2)))/sum(ctTest2)
# cluster 3
predictLogTest3 = predict(stocksModel3,newdata=stocksTest3,type="response")
max(predictLogTest3)
ctTest3<-table(stocksTest3$PositiveDec, predictLogTest3 >= 0.5)
ctTest3
(sum(diag(ctTest3)))/sum(ctTest3)
# cluster 1
predictLogTest1 = predict(stocksModel1,newdata=stocksTest1,type="response")
#max(predictLogTest1)
ctTest1<-table(stocksTest1$PositiveDec, predictLogTest1 >= 0.5)
ctTest1
(sum(diag(ctTest1)))/sum(ctTest1)
# cluster 2
predictLogTest2 = predict(stocksModel2,newdata=stocksTest2,type="response")
#max(predictLogTest2)
ctTest2<-table(stocksTest2$PositiveDec, predictLogTest2 >= 0.5)
ctTest2
(sum(diag(ctTest2)))/sum(ctTest2)
# cluster 3
predictLogTest3 = predict(stocksModel3,newdata=stocksTest3,type="response")
#max(predictLogTest3)
ctTest3<-table(stocksTest3$PositiveDec, predictLogTest3 >= 0.5)
ctTest3
(sum(diag(ctTest3)))/sum(ctTest3)
predictLogTest3
length(predictLogTest3)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
ctAll<-table(Alloutcomes,AllPredictions >=0.5)
ctAll
(sum(diag(ctAll)))/sum(ctAll)
AllPredictions = c(predictLogTest1, predictLogTest2, predictLogTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
ctAll<-table(Alloutcomes,AllPredictions >=0.5)
ctAll
(sum(diag(ctAll)))/sum(ctAll)
AllPredictions = c(predictLogTest1, predictLogTest2, predictLogTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
ctAll<-table(AllOutcomes,AllPredictions >=0.5)
ctAll
(sum(diag(ctAll)))/sum(ctAll)
## THE ANALYTICS EDGE 15.071x
source('C:/Users/Mike/Rspace/MIT_AE/Unit6/Unit6A1.r', echo=TRUE)
dim(dailykos)
sum(distances)
sd(distances)
