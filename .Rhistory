geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
delta<-2*(beta1+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2])
delta
setwd("C:/Users/Mike/Dropbox/Callywith Wind Data")
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
str(dat.wide)
library(reshape2)
source('~/.active-rstudio-document', echo=TRUE)
str(dat.wide)
dat.wide$Timestamp<-as.date(dat.wide$Timestamp)
dat.wide$Timestamp<-as.Date(dat.wide$Timestamp)
str(dat.wide)
head(dat.wide)
?melt
?tidyr
?tidy
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(reshape2)
library(tidyr)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-as.Date(dat.wide$Timestamp)
cw<-gather(dat.wide,V46,V32,V20,Dir,-Timestamp)
quit(swirl)
exit(swirl)
leave
e
eee
str(cw)
?swirl
bye()
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(reshape2)
library(tidyr)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-as.Date(dat.wide$Timestamp)
cw<-gather(dat.wide,V46,V32,V20,Dir,-Timestamp)
head(cw)
head(dat.wide)
rm(cw)
cw<-gather(dat.wide,V,height,-Dir)
?gather
cw<-gather(dat.wide,V,height,V46:V20,-Dir)
head(cw)
nrow(cw)
tail(cw)
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
head(cw)
=mean(cw$V)
mean(cw$V)
mean(is.na(cw$V))
sum(is.na(cw$V))
?as.Date
head(dat.wide)
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
head(dat.wide)
swirl()
library("lubridate", lib.loc="~/R/win-library/3.2")
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(reshape2)
library(tidyr)
library(lubridate)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-dmy_hm(dat.wide$Timestamp)
#tidy the data
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
bye()
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(reshape2)
library(tidyr)
library(lubridate)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-dmy_hm(dat.wide$Timestamp)
#tidy the data
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
head(cw)
summary(cw)
str(cw)
g<-ggplot(dat=cw,aes(x=Timestamp,y=V))+geom_histogram()
g
g<-ggplot(dat=cw,aes(x=Timestamp,fill=height))+geom_histogram(alpha=0.3)
g
g<-ggplot(dat=cw,aes(x=Timestamp,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
g<-ggplot(dat=cw,aes(x=V,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-dmy_hm(dat.wide$Timestamp)
#tidy the data
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
rm(dat.wide)
#Plot histograms of wind speed
g<-ggplot(dat=cw,aes(x=V,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
cw46<-filter(cw,height=V46)
#Plot histograms of wind speed
g<-ggplot(dat=cw46,aes(x=V,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
head(cw)
cw46<-filter(cw,height="V46")
#Plot histograms of wind speed
g<-ggplot(dat=cw46,aes(x=V,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
str(cw46)
?filter
cw46<-filter(cw,height=="V46")
#Plot histograms of wind speed
g<-ggplot(dat=cw46,aes(x=V,fill=height))+geom_histogram(binwidth=1,alpha=0.3)
g
g
g<-ggplot(dat=cw46,aes(x=V,fill=height))+geom_density(alpha=0.3)
g
g<-ggplot(dat=cw,aes(x=V,fill=height))+geom_density(alpha=0.3)
g
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
rm(dat.wide)
cw46<-filter(cw,height=="V46")
cw30<-filter(cw,height=="V30")
cw20<-filter(cw,height=="V20")
#Plot histograms of wind speed
g<-ggplot(dat=cw,aes(x=V,fill=height))+geom_density(alpha=0.3)
g
?rose2
??rose
install.packages("ROSE")
?he
?heR.Misc
install.packages("plotrix")
sd(c(5,8,12))
which.min(c(4,1,6))
read.csv("WHO.csv")
setwd("C:/Users/Mike/Rspace/MIT_AE")
setwd("C:/Users/Mike/Rspace/MIT_AE")
read.csv("WHO.csv")
WHO<-read.csv("WHO.csv")
str(WHO)
WHO<-read.csv("WHO.csv",stringsAsFactors=FALSE)
WHO<-read.csv("WHO.csv",stringsAsFactors=FALSE)
str(WHO)
summary(WHO)
library(dplyr)
WHO<-read.csv("WHO.csv",stringsAsFactors=FALSE)
WHO_Europe<-filter(WHO,Region=="Europe")
str(WHO)
str(WHO_Europe)
write.csv("WHO_Europe")
write.csv("WHO_Europe.csv")
getwd()
write.csv(WHO_Europe,"WHO_Europe.csv")
mean(WHo$Over_60)
library(dplyr)
WHO<-read.csv("WHO.csv",stringsAsFactors=FALSE)
WHO_Europe<-filter(WHO,Region=="Europe")
str(WHO)
str(WHO_Europe)
wri
mean(WHO$Over60)
summary(WHO)
which.min(WHo$Over60)
which.min(WHO$Over60)
WHO[183,"Over60"]
WHO[183,"Country"]
WHO[which.min(WHO$over60),"Country"]
WHO[which.min(WHO$Over60),"Country"]
str(WHO)
WHO[which.max(WHO$LiteracyRate),"Country"]
WHO %>% groupby(Region)
WHO %>% group_by(Region)
WHO %>% group_by(Region) %>%summarise(which.min(ChildMortality),Country)
WHO %>% group_by(Region) %>%(which.min(ChildMortality),Country)
WHO %>% group_by(Region) %>%(which.min(ChildMortality))
WHO %>% group_by(Region) %>%summarise(min=min(ChildMortality))
WHO %>% group_by(Region) %>% min(summarise(min=min(ChildMortality)))
WHO %>% group_by(Region) %>% summarise(min=mean(ChildMortality))
WHO %>% group_by(Region) %>% summarise(mcm=mean(ChildMortality))
WHO %>% group_by(Region) %>% summarise(mcm=mean(ChildMortality)) %>% arrange(mcm)
tapply(WHO,WHO$Region,mean)
?tapply
tapply(WHO$ChildMortality,WHO$Region,mean)
read.csv9"USDA.csv",stringsAsFactors=FALSE)
read.csv(./Data/"USDA.csv",stringsAsFactors=FALSE)
read.csv(./Data "USDA.csv",stringsAsFactors=FALSE)
read.csv("./Data/USDA.csv",stringsAsFactors=FALSE)
usda<-read.csv("./Data/USDA.csv",stringsAsFactors=FALSE)
str(usda)
plot(usda$Fat,usda$Protein,xlab="Fat",ylab="Protein",main="Fat vs Protein")
plot(usda$TotalFat,usda$Protein,xlab="Fat",ylab="Protein",main="Fat vs Protein")
plot(usda$TotalFat,usda$Protein,xlab="Fat",ylab="Protein",main="Fat vs Protein",color="red")
plot(usda$TotalFat,usda$Protein,xlab="Fat",ylab="Protein",main="Fat vs Protein",col="red")
plot(usda$TotalFat,usda$Protein,xlab="Fat",ylab="Protein",main="Protein vs Fat",col="red")
plot(usda$TotalFat,usda$Protein,xlab="Fat",ylab="Protein",main="Protein content vs Fat content",col="red")
usda<-read.csv("./Data/USDA.csv",stringsAsFactors=FALSE)
str(USDA)
str(usda)
usda$highSodium<-as.numeric(usda$Sodium>mean(usda$sodium))
usda$highSodium<-as.numeric(usda$Sodium>mean(usda$Sodium))
str(usda)
usda$highSodium<-as.numeric(usda$Sodium>mean(usda$Sodium,rm.na=TRUE))
str(usda)
usda$highSodium<-as.numeric(usda$Sodium>mean(usda$Sodium,na.rm=TRUE))
str(usda)
usda$highProtein<-as.numeric(usda$Protein>mean(usda$Protein,na.rm=TRUE))
usda$highFat<-as.numeric(usda$TotalFat>mean(usda$TotalFat,na.rm=TRUE))
usda$highCarbs<-as.numeric(usda$Carbohydrate>mean(usda$Carbohydrate,na.rm=TRUE))
str(usda)
# Set working directory
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/idaho2006.csv")
#include date of download
CPS<-date()
}
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/idaho2006.csv")
#include date of download
CPS<-date()
}
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/CPS.csv")
#include date of download
CPS<-date()
}
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/CPS.csv")
#include date of download
CPS<-date()
}
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/CPS.csv")
#include date of download
CPS<-date()
}
summary(CPS)
str(CPS)
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/CPS.csv")
#include date of download
CPS<-date()
}
CPS<-read.csv("CPS.csv",stringsAsFactors=FALSE)
#view the data
summary(CPS)
str(CPS)
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
# Download data
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/CPS.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CPSData.csv"
download.file(fileURL,destfile="./data/CPS.csv")
#include date of download
}
CPS<-read.csv("./data/CPS.csv",stringsAsFactors=FALSE)
#view the data
summary(CPS)
str(CPS)
nrow(CPS)
?which
summary(CPS&Industry)
summary(CPS$Industry)
str(CPS$Industry)
table(CPS$industry)
table(CPS$Industry)
a1.2<-table(CPS$Industry)
class(a1.2)
str9a1.2
str(a1.2)
summary(a1.2)
which.max(a1.2)
a1.2<-sort(table(CPS$Industry))
which.max(a1.2)
a1.2<-sort(table(CPS$Industry))
a1.2
which.max(a1.2)
a1.2<-arrange(table(CPS,Industry)
a1.2
a1.2<-arrange(table(CPS,Industry))
sort(table(CPS$Region))
which.min(sort(table(CPS$Region)))
which.min(sort(table(CPS$State)))
which.max(sort(table(CPS$State)))
str(CPS)
unique(CPS$Citizenship)
cnus<-nrow(filter(CPS,Citizenship==Non-Citizen))
cnus<-nrow(filter(CPS,Citizenship=Non-Citizen))
cnus<-nrow(filter(CPS,Citizenship=="Non-Citizen"))
cnus
"cnus<-nrow(filter(CPS,Citizenship==Non-Citizen"))/nrow(CPS)
"cnus<-nrow(filter(CPS,Citizenship=="Non-Citizen"))/nrow(CPS)
"cnus<-nrow(filter(CPS,Citizenship=="Non-Citizen"))/nrow(CPS)
cnus<-nrow(filter(CPS,Citizenship=="Non-Citizen"))/nrow(CPS)
cnus
1-cnus
str(CPS)
CPS %>% group_by(Race) %>% summarise(hisp=sum(Hispanic))
CPS %>% group_by(Race) %>% summarise(hisp=sum(Hispanic)) %>%filter(hisp>250)
table(CPS$Race, CPS$Hispanic).
table(CPS$Race, CPS$Hispanic)
CPS %>% group_by(Race) %>% summarise(hisp=sum(Hispanic)) %>%filter(hisp>250)
#or
table(CPS$Race, CPS$Hispanic) # seems more straightforward
select(CPS,is.na>0)
select(CPS,is.na!=0)
summary(CPS)
str(CPS)
select(CPS,is.na!==0)
select(CPS,is.na==0)
select(CPS,is.na[,]==0)
select(CPS,is.na(PeopleInHousehold:Industry)==0)
select(CPS,sum(is.na(PeopleInHousehold:Industry)!=0))
is.na(CPS$Industry)
sum(is.na(CPS$Industry))
mean(is.na(CPS$Industry))
mean(is.na(CPS$Industry))
sapply(CPS,function(x){})
sapply(CPS,function(x){sum(is.na(x))>0})
sum(is.na(CPS$MetroAreaCode))
sum(is.na(CPS$Married))
sum(is.na(CPS$Race)
)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Region, mean(is.na(CPS$Married)))
table(CPS$Region, is.na(CPS$Married)/nrow(CPS))
table(CPS$Region, (is.na(CPS$Married)/nrow(CPS))
)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Region, is.na(CPS$Married))[,1]
table(CPS$Region, is.na(CPS$Married))[,2]/(table(CPS$Region, is.na(CPS$Married))[,2])
table(CPS$Region, is.na(CPS$Married))[,2]/((table(CPS$Region, is.na(CPS$Married))[,2])+table(CPS$Region, is.na(CPS$Married))[,1])
table(CPS$Sex, is.na(CPS$Married))[,2]/((table(CPS$Sex, is.na(CPS$Married))[,2])+table(CPS$Sex, is.na(CPS$Married))[,1])
table(CPS$Age, is.na(CPS$Married))[,2]/((table(CPS$Age, is.na(CPS$Married))[,2])+table(CPS$Age, is.na(CPS$Married))[,1])
table(CPS$Citizenship, is.na(CPS$Married))[,2]/((table(CPS$Citizenship, is.na(CPS$Married))[,2])+table(CPS$Citizenship, is.na(CPS$Married))[,1])
table(CPS$Citizenship, is.na(CPS$Married))[,2]/((table(CPS$Citizenship, is.na(CPS$Married))[,2])+table(CPS$Citizenship, is.na(CPS$Married))[,1])#2.3
table(CPS$State, !is.na(CPS$MetroAreaCode)==0)
table(CPS$State, is.na(CPS$MetroAreaCode)==0)
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0))
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2]==0)
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2]=0)
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2]==0)
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2]
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2])
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)==0))
table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,1]/table(CPS$State, is.na(CPS$MetroAreaCode)==0)[,2]
table(CPS$Region, is.na(CPS$MetroAreaCode)==0)[,1]/table(CPS$Region, is.na(CPS$MetroAreaCode)==0)[,2]
tapply(CPS$State,CPS$MetropolitanArea,mean)
str(CPS)
tapply(CPS$State,CPS$MetroAreaCode,mean)
tapply(CPS$State,CPS$MetroAreaCode,mean,na.rm=TRUE)
tapply(CPS$State,is.na(CPS$MetroAreaCode),mean)
str(CPS)
tapply(CPS$State,is.na(CPS$MetroAreaCode),mean)
tapply(CPS$State,!is.na(CPS$MetroAreaCode),mean)
tapply(CPS$State,is.na(CPS$MetroAreaCode)==TRUE,mean)
tapply(CPS$State,is.na(CPS$MetroAreaCode)=TRUE,mean)
tapply(CPS$State,is.na(CPS$MetroAreaCode)==TRUe)
tapply(CPS$State,is.na(CPS$MetroAreaCode)==TRUE)
tapply(CPS$State,mean(is.na(CPS$MetroAreaCode))
)
?tapply
tapply(CPS$State,CPS$MetroploitanArea,mean)
tapply(CPS$State,CPS$MetropolitanArea,mean)
str(CPS)
tapply(CPS$State,CPS$MetroAreaCode,mean)
tapply(CPS$State,is.na(CPS$MetroAreaCode),mean)
tapply(CPS$State,mean(is.na(CPS$MetroAreaCode))
)
tapply(CPS$State,is.na(CPS$MetroAreaCode),mean)
tapply(CPS$State,CPS$MetroAreaCode,mean)
tapply(CPS$State,CPS$MetroAreaCode,mean)/tapply(CPS$State,CPS$MetroAreaCode)
tapply(CPS$State,CPS$MetroAreaCode,mean)/tapply(CPS$State,CPS$MetroAreaCode)
CPS$metr=is.na(CPS$MetroAreaCode)
length(CPS$metr)
nrow(CPS)
mean(CPS$metr)
tapply(CPS$State,CPS$metr,mean)
tapply(CPS$metr,CPS$State,mean)
arrange(tapply(CPS$metr,CPS$State,mean))
0.3-tapply(CPS$metr,CPS$State,mean)
min(0.3-tapply(CPS$metr,CPS$State,mean))
min(abs((0.3-tapply(CPS$metr,CPS$State,mean)))
)
tapply(CPS$metr,CPS$State,mean)
str(tapply(CPS$metr,CPS$State,mean))
arrange(tapply(CPS$metr,CPS$State,mean),)
arrange(tapply(CPS$metr,CPS$State,mean))
sort(tapply(CPS$metr,CPS$State,mean))
# download data if not yet already done so
if(!file.exists("./data/MetroAreaCodes.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/MetroAreaCodes.csv"
download.file(fileURL,destfile="./data/MetroAreaCodes.csv")
#include date of download
}
MetroAreaMap<-read.csv("./data/MetroAreaCodes.csv
MetroAreaMap<-read.csv("./data/MetroAreaCodes.csv",stringsAsFactors=FALSE)
getwd()
MetroAreaMap<-read.csv("./data/MetroAreaCodes.csv")
MetroAreaMap<-read.csv("./data/MetroAreaCodes.csv",stringsAsFactors=FALSE)
file.exists("./data/CountryCodes.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/CountryCodes.csv"
download.file(fileURL,destfile="./data/CountryCodes.csv")
#include date of download
}
Cou
CountryMap<-read.csv("./data/CountryCodes.csv")
length(MetroAreaMap)
str(MetroAreaMap)
length(MetroAreaMap$Code)
str(CountrYMap)
str(CountryMap)
length(CountryCode)
length(unique(CountryMap$Code)
)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
str(CPS)
=sum(is.na(CPS$MetroArea))
sum(is.na(CPS$MetroArea))
tapply(CPS$SE,)
e
tapply(CPS$Sex,CPS$MetroArea,is.na)
tapply(CPS$Sex,CPS$MetroArea,sum(is.na)
)
