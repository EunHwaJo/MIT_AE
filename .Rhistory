g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = 0, xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = 0, y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
rm(list=ls())
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
# residuals
e<-y-beta0-beta1*x
# sd around the regression line
sigma<-sqrt(sum(e^2)/(n-2))
sigma
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
beta0Range<-sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
beta0Range
beta1Range<-sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
beta1Range
mpgrange<-mean(y)+c(-1,1)*qt(0.975,df=fit$df)*sigma/sqrt(n)
mpgrange
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = 0, xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = min(wt), y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
rm(list=ls())
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
# residuals
e<-y-beta0-beta1*x
# sd around the regression line
sigma<-sqrt(sum(e^2)/(n-2))
sigma
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
beta0Range<-sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
beta0Range
beta1Range<-sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
beta1Range
mpgrange<-mean(y)+c(-1,1)*qt(0.975,df=fit$df)*sigma/sqrt(n)
mpgrange
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = min(mpg), xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = min(wt), y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
rm(list=ls())
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
# residuals
e<-y-beta0-beta1*x
# sd around the regression line
sigma<-sqrt(sum(e^2)/(n-2))
sigma
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
beta0Range<-sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
beta0Range
beta1Range<-sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
beta1Range
mpgrange<-mean(y)+c(-1,1)*qt(0.975,df=fit$df)*sigma/sqrt(n)
mpgrange
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = 0, xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = min(wt), y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
?predict
attach(mtcars)     # attach the data frame
fit.lm = lm(mpg ~ wt)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
detach(mtcars)     # clean up
x<-mtcars$wt
y<-mtcars$mpg
attach(mtcars)     # attach the data frame
fit.lm = lm(y ~ x)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(x=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
detach(mtcars)     # clean up
x<-mtcars$wt
y<-mtcars$mpg
attach(mtcars)     # attach the data frame
fit.lm = lm(y ~ x)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(x=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
detach(mtcars)     # clean up
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
rm(list=ls())
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
# residuals
e<-y-beta0-beta1*x
# sd around the regression line
sigma<-sqrt(sum(e^2)/(n-2))
sigma
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
beta0Range<-sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
beta0Range
beta1Range<-sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
beta1Range
mpgrange<-mean(y)+c(-1,1)*qt(0.975,df=fit$df)*sigma/sqrt(n)
mpgrange
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = 0, xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = min(wt), y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
rm(list=ls())
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
# residuals
e<-y-beta0-beta1*x
# sd around the regression line
sigma<-sqrt(sum(e^2)/(n-2))
sigma
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
beta0Range<-sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
beta0Range
beta1Range<-sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
beta1Range
mpgrange<-mean(y)+c(-1,1)*qt(0.975,df=fit$df)*sigma/sqrt(n)
mpgrange
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Three") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)+
geom_segment(aes(x = mean(wt), y = 0, xend = mean(wt),
yend = mean(mpg)))+
geom_segment(aes(x = min(wt), y = mean(mpg), xend = mean(wt),
yend = mean(mpg)))
#geom_line(stat="vline", xintercept="mean")+
#geom_line(stat="hline", yintercept="mean")
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
#predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
#predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=x,y=y))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
#predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(wt), to = max(wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(x = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
man <- predict(fit.lm, newdata = predx, se = TRUE)
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")#+
#geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
head(predx)
head(pred.int)
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg))+
ggtitle("Question Five") +
geom_point(size=3,shape=1,col="red")+
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
#geom_smooth(method=lm)
g
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
newdata = data.frame(wt=3)
# We now apply the predict function and set the predictor variable in the
# newdata argument. We also set the interval type as "prediction", and use
# the default 0.95 confidence level.
predict(fit.lm, newdata, interval="prediction",level=0.95)
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
# ''' confidence interval
conf..int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "confidence", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five- Prediction interval") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")+
geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
fit.lm = lm(mpg ~ wt,data=mtcars)
# Then we create a new data frame that set the waiting time value.
# Predict these data for...
predx <- data.frame(wt = seq(from = min(mtcars$wt), to = max(mtcars$wt), by = 0.1))
# ... prediction interval
pred.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "prediction", level = 0.95))
# ''' confidence interval
conf.int <- cbind(predx, predict(fit.lm, newdata = predx, interval = "confidence", level = 0.95))
g.pred <- ggplot(pred.int, aes(x = wt, y = fit)) +
theme_bw() +
ggtitle("Question Five- Prediction interval") +
geom_point(data = mtcars, aes(x = wt, y = mpg)) +
geom_smooth(data = pred.int, aes(ymin = lwr, ymax = upr), stat = "identity")+
geom_smooth(data = conf.int, aes(ymin = lwr, ymax = upr), stat = "identity")
g.pred
#find width of prediction interval at wt=3
newdata = data.frame(wt=3)
predict(fit.lm, newdata, interval="prediction",level=0.95)
delta<-2*(beta1+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2])
delta
# Set working directory
setwd("C:/Users/Mike/Rspace/MIT_AE")
library(dplyr)
library(lubridate)
## AN ANALYTICAL DETECTIVE
if(!file.exists("data")){
dir.create("data")
}
# download data if not yet already done so
if(!file.exists("./data/mvtWeek1.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvtWeek1.csv"
download.file(fileURL,destfile="./data/mvtWeek1.csv")
#include date of download
}
mvt<-read.csv("./data/mvtWeek1.csv",stringsAsFactors=FALSE)
#1.1
nrow(mvt)
#1.2
str(mvt)
#1.3
max(mvt$ID)
#1.4
min(mvt$Beat)
#1.5
sum(mvt$Arrest==TRUE)
#1.6
sum(mvt$LocationDescription=="ALLEY")
#1.7
mvt$month<-as.POSIXlt(mdy_hm(mvt$Date))$mon+1
gtamax<-mvt %>%
filter(Arrest==TRUE) %>%
group_by(month) %>%
count(month) %>%
arrange(-n)
gtamax
#2.5
hist(mvt$Date, breaks=100)
str(mvt)
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
median(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
table(mvt$Month)
sort(table(mvt$Month))
sort(table(mvt$Weekday))
hist(mvt$Date, breaks=100)
?boxplot
boxplot(mvt$Date)
boxplot(mvt$Date,mvt$Arrest)
boxplot(Date~Arrest,mvt)
